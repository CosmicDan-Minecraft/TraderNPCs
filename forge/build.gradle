plugins {
    id "com.github.johnrengelman.shadow" version "8.1.1"

    //id 'com.matthewprenger.cursegradle'
    //id "com.modrinth.minotaur"
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    //accessWidenerPath = project(":${project.modid}-common").loom.accessWidenerPath

    forge {
        mixinConfig "tradernpcs-common.mixins.json"
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"

    // Taterzens
    // We need this for profession API
    //modCompileOnly("com.github.samolego.Taterzens:taterzens-fabric:${project.taterzens}")
    //modImplementation("com.github.samolego.Taterzens:taterzens-forge:${project.taterzens}")
    modImplementation ("_lib:taterzens:${project.taterzens}-forge")
    

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive false }
}

processResources {
    inputs.property "version", project.version
    inputs.property "taterzens", rootProject.taterzens

    filesMatching("META-INF/mods.toml") {
        expand("version": project.version, "taterzens": rootProject.taterzens)
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = "forge"
}

jar {
    archiveClassifier = "forge-dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
